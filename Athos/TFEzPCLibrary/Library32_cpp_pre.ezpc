(*

Authors: Nishant Kumar.

Copyright:
Copyright (c) 2020 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)

(**************************)
def void MatMul2D(int32_pl i, int32_pl j, int32_pl k, int32_al[i][j] A, int32_al[j][k] B, int32_al[i][k] C, bool_pl modelIsA)
{
	for i1=[0:i]{
		for i2=[0:k]{
			C[i1][i2] = 0;
			for i3=[0:j]{
				C[i1][i2] = C[i1][i2] +_al (A[i1][i3]*B[i3][i2]);
			};
		};
	};
}

(**************************)
def void ArgMax(int32_pl s1, int32_pl s2, int32_al[s1][s2] inArr, int32_al[s1] outArr)
{
	for od=[0:s1]{
		int32_al maxi = inArr[od][0];
		int32_al maxiIdx = 0;
		for i=[0:s2]{
			int32_pl iL = i;
			maxiIdx = (inArr[od][i] > maxi) ? iL : maxiIdx;
			maxi = (inArr[od][i] > maxi) ? inArr[od][i] : maxi;
		};
		outArr[od] = maxiIdx;
	};
}

(**************************)
def void Relu(int32_pl s1, int32_al[s1] inArr, int32_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
	for i1=[0:s1]{
		outArr[i1] = ((inArr[i1] > 0) ? inArr[i1] : 0);
	};

	if (doTruncation)
	{
		for i1=[0:s1]{
			outArr[i1] = (outArr[i1] >> sf);
		};
	}
}

(**************************)
def void Floor(int32_pl s1, int32_al[s1] inArr, int32_al[s1] outArr, int32_pl sf){
	int32_pl mask = ~((1<<sf) - 1);
	for i1=[0:s1]{
		outArr[i1] = (inArr[i1] & mask);
	};
}


(**************************)
(* int32_al[N][H][W][C] input *)
def void MaxPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int32_al[N1][imgH][imgW][C1] inArr, 
				  int32_al[N][H][W][C] outArr){
	
	for n=[0:N]{
		for c=[0:C]{
			int32_pl leftTopCornerH = 0 - zPadHLeft;
			int32_pl extremeRightBottomCornerH = imgH - 1 + zPadHRight;
			int32_pl ctH = 0;
			while((leftTopCornerH + ksizeH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadWLeft;
				int32_pl extremeRightBottomCornerW = imgW - 1 + zPadWRight;
				int32_pl ctW = 0;
				while((leftTopCornerW + ksizeW - 1) <= extremeRightBottomCornerW){

					int32_al maxi = 0;
					if ((((leftTopCornerH < 0) || (leftTopCornerH >= imgH)) || ((leftTopCornerW < 0) || (leftTopCornerW >= imgW)))){
						maxi = 0;
					}
					else{
						maxi = inArr[n][leftTopCornerH][leftTopCornerW][c];
					};
					for fh=[0:ksizeH]{
						for fw=[0:ksizeW]{
							int32_pl curPosH = leftTopCornerH + fh;
							int32_pl curPosW = leftTopCornerW + fw;
							int32_al temp = 0;
							if ((((curPosH < 0) || (curPosH >= imgH)) || ((curPosW < 0) || (curPosW >= imgW)))){
								temp = 0;
							}
							else{
								temp = inArr[n][curPosH][curPosW][c];
							};
							(* 
								Note the following is intentionally kept as maxi-temp<0 and not maxi<temp,
									since that is what the cleartext implements.
							*)
							maxi = ((maxi - temp < 0) ? temp : maxi);
						};
					};

					outArr[n][ctH][ctW][c] = maxi;
					leftTopCornerW = leftTopCornerW + strideW;
					ctW = ctW + 1;
				};

				leftTopCornerH = leftTopCornerH + strideH;
				ctH = ctH + 1;
			};
		};
	};

}


(**************************)
def int32_al divFloor(int32_al a, int32_pl b)
{
	int32_al q = a/b;
	int32_al r = a%b;
	bool_bl cond1 = (!(r == 0));
	bool_bl cond2 = (r < 0);
	bool_bl corr = (cond1 && cond2);
	int32_al corri = (corr ? 1 : 0);
	return q - corri;
}

(* int32_al[N][H][W][C] input *)
def void AvgPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int32_al[N1][imgH][imgW][C1] inArr, 
				  int32_al[N][H][W][C] outArr){

	int32_pl rows = N*C*H*W;
	int32_al[rows] filterAvg;

	int32_pl rowIdx = 0;
	for n=[0:N]{
		for c=[0:C]{
			int32_pl leftTopCornerH = 0 - zPadHLeft;
			int32_pl extremeRightBottomCornerH = imgH - 1 + zPadHRight;
			int32_pl ctH = 0;
			while((leftTopCornerH + ksizeH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadWLeft;
				int32_pl extremeRightBottomCornerW = imgW - 1 + zPadWRight;
				int32_pl ctW = 0;
				while((leftTopCornerW + ksizeW - 1) <= extremeRightBottomCornerW){

					int32_al curFilterSum = 0;
					for fh=[0:ksizeH]{
						for fw=[0:ksizeW]{
							int32_pl curPosH = leftTopCornerH + fh;
							int32_pl curPosW = leftTopCornerW + fw;
							int32_al temp = 0;
							if ((((curPosH < 0) || (curPosH >= imgH)) || ((curPosW < 0) || (curPosW >= imgW)))){
								temp = 0;
							}
							else{
								temp = inArr[n][curPosH][curPosW][c];
							};
							curFilterSum = curFilterSum + temp;
						};
					};

					int32_pl ksizeH64 = ksizeH;
					int32_pl ksizeW64 = ksizeW;
					int32_pl filterSz64 = (ksizeH64) * (ksizeW64);
					int32_al curFilterAvg = divFloor(curFilterSum, filterSz64);
					filterAvg[rowIdx] = curFilterAvg;
					rowIdx = rowIdx + 1;

					leftTopCornerW = leftTopCornerW + strideW;
					ctW = ctW + 1;
				};

				leftTopCornerH = leftTopCornerH + strideH;
				ctH = ctH + 1;
			};
		};
	};

	for n=[0:N]{
		for c=[0:C]{
			for h=[0:H]{
				for w=[0:W]{
					outArr[n][h][w][c] = filterAvg[(n*C*H*W) + (c*H*W) + (h*W) + w];
				};
			};
		};
	};
}

(**************************)
def void ElemWiseSecretSharedVectorMult(int32_pl s1, int32_al[s1] arr1, int32_al[s1] arr2, int32_al[s1] outArr)
{
	for ii=[0:s1]{
		outArr[ii] = (arr1[ii] * arr2[ii]);
	};
}

def void ElemWiseActModelVectorMult(int32_pl s1, int32_al[s1] arr1, int32_al[s1] arr2, int32_al[s1] outArr)
{
	ElemWiseSecretSharedVectorMult(s1, arr1, arr2, outArr);
}

def void ElemWiseVectorPublicDiv(int32_pl s1, int32_al[s1] arr1, int32_pl divisor, int32_al[s1] outArr)
{
	for ii=[0:s1]{
		outArr[ii] = (arr1[ii] / divisor);
	};
}


(**************************)
def void ScaleUp(int32_pl s1, int32_al[s1] arr, int32_pl sf)
{
	for i=[0:s1]{
		arr[i] = (arr[i] << sf);
	};
}

(**************************)
def void ScaleDown(int32_pl s1, int32_al[s1] arr, int32_pl sf){
	for i1=[0:s1]{
		arr[i1] = arr[i1] >> sf;
	};
}

(**************************)
def void ClearMemSecret1(int32_pl s1, int32_al[s1] arr)
{
	return;
}

def void ClearMemSecret2(int32_pl s1, int32_pl s2, int32_al[s1][s2] arr)
{
	return;
}

def void ClearMemSecret3(int32_pl s1, int32_pl s2, int32_pl s3, int32_al[s1][s2][s3] arr)
{
	return;
}

def void ClearMemSecret4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] arr)
{
	return;
}

def void ClearMemSecret5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] arr)
{
	return;
}

def void ClearMemPublic(int32_pl x)
{
	return;	
}

def void ClearMemPublic1(int32_pl s, int32_pl[s] x)
{
	return;	
}

def void ClearMemPublic2(int32_pl s1, int32_pl s2, int32_pl[s1][s2] arr)
{
	return;	
}

def void ClearMemPublic3(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl[s1][s2][s3] arr)
{
	return;	
}

def void ClearMemPublic4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl[s1][s2][s3][s4] arr)
{
	return;	
}

def void ClearMemPublic5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl[s1][s2][s3][s4][s5] arr)
{
	return;	
}

(**************************)
def void StartComputation()
{
	return;
}

def void EndComputation()
{
	return;
}
